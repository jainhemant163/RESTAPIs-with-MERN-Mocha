{"version":3,"sources":["../../../api/server/controllers/BookController.js"],"names":["util","Util","BookController","req","res","BookService","getAllBooks","allBooks","length","setSuccess","send","setError","body","title","price","description","newBook","addBook","createdBook","message","alteredBook","id","params","Number","updateBook","getABook","theBook","deleteBook","bookToDelete"],"mappings":"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","sourcesContent":["import BookService from '../services/BookService';\r\nimport Util from '../utils/Utils';\r\n\r\nconst util = new Util();\r\n\r\nclass BookController {\r\n  static async getAllBooks(req, res) {\r\n    try {\r\n      const allBooks = await BookService.getAllBooks();\r\n      if (allBooks.length > 0) {\r\n        util.setSuccess(200, 'Books retrieved', allBooks);\r\n      } else {\r\n        util.setSuccess(200, 'No book found');\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(400, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async addBook(req, res) {\r\n    if (!req.body.title || !req.body.price || !req.body.description) {\r\n      util.setError(400, 'Please provide complete details');\r\n      return util.send(res);\r\n    }\r\n    const newBook = req.body;\r\n    try {\r\n      const createdBook = await BookService.addBook(newBook);\r\n      util.setSuccess(201, 'Book Added!', createdBook);\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(400, error.message);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async updatedBook(req, res) {\r\n    const alteredBook = req.body;\r\n    const { id } = req.params;\r\n    if (!Number(id)) {\r\n      util.setError(400, 'Please input a valid numeric value');\r\n      return util.send(res);\r\n    }\r\n    try {\r\n      const updateBook = await BookService.updateBook(id, alteredBook);\r\n      if (!updateBook) {\r\n        util.setError(404, `Cannot find book with the id: ${id}`);\r\n      } else {\r\n        util.setSuccess(200, 'Book updated', updateBook);\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(404, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async getABook(req, res) {\r\n    const { id } = req.params;\r\n\r\n    if (!Number(id)) {\r\n      util.setError(400, 'Please input a valid numeric value');\r\n      return util.send(res);\r\n    }\r\n\r\n    try {\r\n      const theBook = await BookService.getABook(id);\r\n\r\n      if (!theBook) {\r\n        util.setError(404, `Cannot find book with the id ${id}`);\r\n      } else {\r\n        util.setSuccess(200, 'Found Book', theBook);\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(404, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async deleteBook(req, res) {\r\n    const { id } = req.params;\r\n\r\n    if (!Number(id)) {\r\n      util.setError(400, 'Please provide a numeric value');\r\n      return util.send(res);\r\n    }\r\n\r\n    try {\r\n      const bookToDelete = await BookService.deleteBook(id);\r\n\r\n      if (bookToDelete) {\r\n        util.setSuccess(200, 'Book deleted');\r\n      } else {\r\n        util.setError(404, `Book with the id ${id} cannot be found`);\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(400, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n}\r\n\r\nexport default BookController;"],"file":"BookController.js"}